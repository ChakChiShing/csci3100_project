{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["MaterialTopTabNavigator","initialRouteName","backBehavior","children","screenOptions","lazy","tabBarOptions","rest","defaultScreenOptions","Object","assign","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarPressColor","pressColor","tabBarPressOpacity","pressOpacity","tabBarShowLabel","showLabel","tabBarShowIcon","showIcon","tabBarAllowFontScaling","allowFontScaling","tabBarBounces","bounces","tabBarScrollEnabled","scrollEnabled","tabBarIconStyle","iconStyle","tabBarLabelStyle","labelStyle","tabBarItemStyle","tabStyle","tabBarIndicatorStyle","indicatorStyle","tabBarIndicatorContainerStyle","indicatorContainerStyle","tabBarContentContainerStyle","contentContainerStyle","tabBarStyle","style","JSON","stringify","state","descriptors","navigation","TabRouter"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAUA;;;;;;;;;;AAWA,SAASA,uBAAT,CAAiC;AAC/BC,EAAAA,gBAD+B;AAE/BC,EAAAA,YAF+B;AAG/BC,EAAAA,QAH+B;AAI/BC,EAAAA,aAJ+B;AAK/B;AACAC,EAAAA,IAN+B;AAO/B;AACAC,EAAAA,aAR+B;AAS/B,KAAGC;AAT4B,CAAjC,EAUU;AACR,MAAIC,oBAAqD,GAAG,EAA5D;;AAEA,MAAIF,aAAJ,EAAmB;AACjBG,IAAAA,MAAM,CAACC,MAAP,CAAcF,oBAAd,EAAoC;AAClCG,MAAAA,qBAAqB,EAAEL,aAAa,CAACM,eADH;AAElCC,MAAAA,uBAAuB,EAAEP,aAAa,CAACQ,iBAFL;AAGlCC,MAAAA,gBAAgB,EAAET,aAAa,CAACU,UAHE;AAIlCC,MAAAA,kBAAkB,EAAEX,aAAa,CAACY,YAJA;AAKlCC,MAAAA,eAAe,EAAEb,aAAa,CAACc,SALG;AAMlCC,MAAAA,cAAc,EAAEf,aAAa,CAACgB,QANI;AAOlCC,MAAAA,sBAAsB,EAAEjB,aAAa,CAACkB,gBAPJ;AAQlCC,MAAAA,aAAa,EAAEnB,aAAa,CAACoB,OARK;AASlCC,MAAAA,mBAAmB,EAAErB,aAAa,CAACsB,aATD;AAUlCC,MAAAA,eAAe,EAAEvB,aAAa,CAACwB,SAVG;AAWlCC,MAAAA,gBAAgB,EAAEzB,aAAa,CAAC0B,UAXE;AAYlCC,MAAAA,eAAe,EAAE3B,aAAa,CAAC4B,QAZG;AAalCC,MAAAA,oBAAoB,EAAE7B,aAAa,CAAC8B,cAbF;AAclCC,MAAAA,6BAA6B,EAAE/B,aAAa,CAACgC,uBAdX;AAelCC,MAAAA,2BAA2B,EAAEjC,aAAa,CAACkC,qBAfT;AAgBlCC,MAAAA,WAAW,EAAEnC,aAAa,CAACoC;AAhBO,KAApC;AAmBA,2BACEpC,aADF,2MAEoMqC,IAAI,CAACC,SAAL,CAChMpC,oBADgM,EAEhM,IAFgM,EAGhM,CAHgM,CAFpM;AAQD;;AAED,MAAI,OAAOH,IAAP,KAAgB,SAApB,EAA+B;AAC7BG,IAAAA,oBAAoB,CAACH,IAArB,GAA4BA,IAA5B;AAEA,2BACE,IADF;AAID;;AAED,QAAM;AAAEwC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAqC,kCAMzCC,iBANyC,EAM9B;AACX/C,IAAAA,gBADW;AAEXC,IAAAA,YAFW;AAGXC,IAAAA,QAHW;AAIXC,IAAAA;AAJW,GAN8B,CAA3C;AAaA,sBACE,oBAAC,2BAAD,eACMG,IADN;AAEE,IAAA,KAAK,EAAEsC,KAFT;AAGE,IAAA,UAAU,EAAEE,UAHd;AAIE,IAAA,WAAW,EAAED;AAJf,KADF;AAQD;;eAEc,oCAKb9C,uBALa,C","sourcesContent":["import * as React from 'react';\nimport warnOnce from 'warn-once';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  TabRouter,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n  ParamListBase,\n} from '@react-navigation/native';\nimport MaterialTopTabView from '../views/MaterialTopTabView';\nimport type {\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<MaterialTopTabNavigationOptions> &\n  TabRouterOptions &\n  MaterialTopTabNavigationConfig;\n\nfunction MaterialTopTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenOptions,\n  // @ts-expect-error: lazy is deprecated\n  lazy,\n  // @ts-expect-error: tabBarOptions is deprecated\n  tabBarOptions,\n  ...rest\n}: Props) {\n  let defaultScreenOptions: MaterialTopTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style,\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/6.x/material-top-tab-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Material Top Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.`\n    );\n  }\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    TabNavigationState<ParamListBase>,\n    TabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    MaterialTopTabNavigationOptions,\n    MaterialTopTabNavigationEventMap\n  >(TabRouter, {\n    initialRouteName,\n    backBehavior,\n    children,\n    screenOptions,\n  });\n\n  return (\n    <MaterialTopTabView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap,\n  typeof MaterialTopTabNavigator\n>(MaterialTopTabNavigator);\n"]}