{"version":3,"sources":["index.tsx"],"names":["SafeAreaContext","React","createContext","SafeAreaProvider","children","parentInsets","useParentSafeArea","useState","insets","setInsets","onInsetsChange","useCallback","event","nativeEvent","styles","fill","StyleSheet","create","flex","SafeAreaConsumer","Consumer","useContext","useSafeArea","safeArea","Error"],"mappings":"+bAAA,oDACA,yCACA,0CACA,gF,uFAEO,GAAMA,CAAAA,eAAe,CAAGC,KAAK,CAACC,aAAN,CAAuC,IAAvC,CAAxB,C,wCAMA,QAASC,CAAAA,gBAAT,MAA2D,IAA/BC,CAAAA,QAA+B,MAA/BA,QAA+B,CAChE,GAAIC,CAAAA,YAAY,CAAGC,iBAAiB,EAApC,CADgE,oBAEpCL,KAAK,CAACM,QAAN,CAAkC,IAAlC,CAFoC,iEAEzDC,MAFyD,qBAEjDC,SAFiD,qBAGhE,GAAMC,CAAAA,cAAc,CAAGT,KAAK,CAACU,WAAN,CAAkB,SAACC,KAAD,CAA8B,CACrEH,SAAS,CAACG,KAAK,CAACC,WAAN,CAAkBL,MAAnB,CAAT,CACD,CAFsB,CAEpB,EAFoB,CAAvB,CAMA,GAAIH,YAAJ,CAAkB,CAChB,MAAO,qBAAC,iBAAD,EAAM,KAAK,CAAES,MAAM,CAACC,IAApB,iDAA2BX,QAA3B,CAAP,CACD,CAFD,IAEO,CACL,MACE,qBAAC,2BAAD,EAAoB,KAAK,CAAEU,MAAM,CAACC,IAAlC,CAAwC,cAAc,CAAEL,cAAxD,iDACGF,MAAM,GAAK,IAAX,CACC,oBAAC,eAAD,CAAiB,QAAjB,EAA0B,KAAK,CAAEA,MAAjC,iDACGJ,QADH,CADD,CAIG,IALN,CADF,CASD,CACF,CAED,GAAMU,CAAAA,MAAM,CAAGE,wBAAWC,MAAX,CAAkB,CAC/BF,IAAI,CAAE,CAAEG,IAAI,CAAE,CAAR,CADyB,CAAlB,CAAf,CAIO,GAAMC,CAAAA,gBAAgB,CAAGnB,eAAe,CAACoB,QAAzC,C,0CAEP,QAASd,CAAAA,iBAAT,EAAwE,CACtE,MAAOL,CAAAA,KAAK,CAACoB,UAAN,CAAiBrB,eAAjB,CAAP,CACD,CAEM,QAASsB,CAAAA,WAAT,EAAmC,CACxC,GAAMC,CAAAA,QAAQ,CAAGtB,KAAK,CAACoB,UAAN,CAAiBrB,eAAjB,CAAjB,CACA,GAAIuB,QAAQ,EAAI,IAAhB,CAAsB,CACpB,KAAM,IAAIC,CAAAA,KAAJ,CACJ,wGADI,CAAN,CAGD,CACD,MAAOD,CAAAA,QAAP,CACD","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { EdgeInsets, InsetChangedEvent } from './SafeArea.types';\nimport NativeSafeAreaView from './NativeSafeAreaView';\n\nexport const SafeAreaContext = React.createContext<EdgeInsets | null>(null);\n\nexport interface SafeAreaViewProps {\n  children?: React.ReactNode;\n}\n\nexport function SafeAreaProvider({ children }: SafeAreaViewProps) {\n  let parentInsets = useParentSafeArea();\n  const [insets, setInsets] = React.useState<EdgeInsets | null>(null);\n  const onInsetsChange = React.useCallback((event: InsetChangedEvent) => {\n    setInsets(event.nativeEvent.insets);\n  }, []);\n\n  // If a provider is nested inside of another provider then we can just use\n  // the parent insets, without rendering another native safe area view\n  if (parentInsets) {\n    return <View style={styles.fill}>{children}</View>;\n  } else {\n    return (\n      <NativeSafeAreaView style={styles.fill} onInsetsChange={onInsetsChange}>\n        {insets !== null ? (\n          <SafeAreaContext.Provider value={insets}>\n            {children}\n          </SafeAreaContext.Provider>\n        ) : null}\n      </NativeSafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  fill: { flex: 1 },\n});\n\nexport const SafeAreaConsumer = SafeAreaContext.Consumer;\n\nfunction useParentSafeArea(): React.ContextType<typeof SafeAreaContext> {\n  return React.useContext(SafeAreaContext);\n}\n\nexport function useSafeArea(): EdgeInsets {\n  const safeArea = React.useContext(SafeAreaContext);\n  if (safeArea == null) {\n    throw new Error(\n      'No safe area value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.',\n    );\n  }\n  return safeArea;\n}\n\nexport type EdgeInsets = EdgeInsets;\n"]}