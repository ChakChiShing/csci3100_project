{"version":3,"sources":["TabView.tsx"],"names":["TabView","React","Component","layout","width","height","props","initialLayout","index","navigationState","onIndexChange","e","nativeEvent","state","setState","render","onSwipeStart","onSwipeEnd","lazy","lazyPreloadDistance","keyboardDismissMode","swipeEnabled","tabBarPosition","renderTabBar","renderScene","renderLazyPlaceholder","sceneContainerStyle","style","handleLayout","styles","pager","jumpToIndex","position","addEnterListener","jumpTo","sceneRendererProps","routes","map","route","i","key","loading","removeClippedSubviews","StyleSheet","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport SceneView from './SceneView';\nimport Pager from './Pager';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerProps,\n} from './types';\n\nexport type Props<T extends Route> = PagerProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: ((props: { route: T }) => boolean) | boolean;\n  lazyPreloadDistance: number;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'auto',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      keyboardDismissMode,\n      swipeEnabled,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <View onLayout={this.handleLayout} style={[styles.pager, style]}>\n        <Pager\n          layout={layout}\n          navigationState={navigationState}\n          keyboardDismissMode={keyboardDismissMode}\n          swipeEnabled={swipeEnabled}\n          onSwipeStart={onSwipeStart}\n          onSwipeEnd={onSwipeEnd}\n          onIndexChange={this.jumpToIndex}\n        >\n          {({ position, render, addEnterListener, jumpTo }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addEnterListener={addEnterListener}\n                        key={route.key}\n                        index={i}\n                        lazy={\n                          typeof lazy === 'function' ? lazy({ route }) : lazy\n                        }\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          }}\n        </Pager>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}