{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/apple/Desktop/M.Hero/project/csci3100_project/node_modules/react-native-auto-height-image/ImagePolyfill.js\";\nimport React, { useEffect } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AnimatableImage from \"./AnimatableImage\";\n\nvar isAndroid = function isAndroid() {\n  return Platform.OS === 'android';\n};\n\nfunction ImagePolyfill(props) {\n  var source = props.source,\n      onError = props.onError,\n      rest = _objectWithoutProperties(props, [\"source\", \"onError\"]);\n\n  var verifyImage = function verifyImage() {\n    var uri = source.uri;\n    Image.prefetch(uri).catch(function (e) {\n      return onError(e);\n    });\n  };\n\n  useEffect(function () {\n    if (source && source.uri && onError && isAndroid()) {\n      verifyImage();\n    }\n  }, [source, onError]);\n  return React.createElement(AnimatableImage, _extends({\n    source: source\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }));\n}\n\nImagePolyfill.propTypes = AnimatableImage.propTypes;\nImagePolyfill.defaultProps = AnimatableImage.defaultProps;\nexport default ImagePolyfill;","map":{"version":3,"sources":["/Users/apple/Desktop/M.Hero/project/csci3100_project/node_modules/react-native-auto-height-image/ImagePolyfill.js"],"names":["React","useEffect","AnimatableImage","isAndroid","Platform","OS","ImagePolyfill","props","source","onError","rest","verifyImage","uri","Image","prefetch","catch","e","propTypes","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,OAAOC,eAAP;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAMC,QAAQ,CAACC,EAAT,KAAgB,SAAtB;AAAA,CAAlB;;AAQA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,MACpBC,MADoB,GACSD,KADT,CACpBC,MADoB;AAAA,MACZC,OADY,GACSF,KADT,CACZE,OADY;AAAA,MACAC,IADA,4BACSH,KADT;;AAG5B,MAAMI,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,QAChBC,GADgB,GACRJ,MADQ,CAChBI,GADgB;AAExBC,IAAAA,KAAK,CAACC,QAAN,CAAeF,GAAf,EAAoBG,KAApB,CAA0B,UAACC,CAAD;AAAA,aAAOP,OAAO,CAACO,CAAD,CAAd;AAAA,KAA1B;AACD,GAHD;;AAKAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,MAAM,IAAIA,MAAM,CAACI,GAAjB,IAAwBH,OAAxB,IAAmCN,SAAS,EAAhD,EAAoD;AAClDQ,MAAAA,WAAW;AACZ;AACF,GAJQ,EAIN,CAACH,MAAD,EAASC,OAAT,CAJM,CAAT;AAMA,SAAO,oBAAC,eAAD;AAAiB,IAAA,MAAM,EAAED;AAAzB,KAAqCE,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;;AAEDJ,aAAa,CAACW,SAAd,GAA0Bf,eAAe,CAACe,SAA1C;AACAX,aAAa,CAACY,YAAd,GAA6BhB,eAAe,CAACgB,YAA7C;AAEA,eAAeZ,aAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { Platform, Image } from 'react-native';\nimport AnimatableImage from './AnimatableImage';\n\nconst isAndroid = () => Platform.OS === 'android';\n\n/**\n * An extension of the Image class which fixes an Android bug where remote images wouldn't fire the\n * Image#onError() callback when the image failed to load due to a 404 response.\n *\n * This component should only be used for loading remote images, not local resources.\n */\nfunction ImagePolyfill(props) {\n  const { source, onError, ...rest } = props;\n\n  const verifyImage = () => {\n    const { uri } = source;\n    Image.prefetch(uri).catch((e) => onError(e));\n  };\n\n  useEffect(() => {\n    if (source && source.uri && onError && isAndroid()) {\n      verifyImage();\n    }\n  }, [source, onError]);\n\n  return <AnimatableImage source={source} {...rest} />;\n}\n\nImagePolyfill.propTypes = AnimatableImage.propTypes;\nImagePolyfill.defaultProps = AnimatableImage.defaultProps;\n\nexport default ImagePolyfill;\n"]},"metadata":{},"sourceType":"module"}