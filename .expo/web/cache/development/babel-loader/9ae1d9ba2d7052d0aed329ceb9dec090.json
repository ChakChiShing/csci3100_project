{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/janic/Developer/react-native-safe-area-context/src/index.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { EdgeInsets } from \"./SafeArea.types\";\nimport NativeSafeAreaView from \"./NativeSafeAreaView\";\nexport var SafeAreaContext = React.createContext(null);\nexport function SafeAreaProvider(_ref) {\n  var children = _ref.children;\n  var parentInsets = useParentSafeArea();\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      insets = _React$useState2[0],\n      setInsets = _React$useState2[1];\n\n  var onInsetsChange = React.useCallback(function (event) {\n    setInsets(event.nativeEvent.insets);\n  }, []);\n\n  if (parentInsets) {\n    return React.createElement(View, {\n      style: styles.fill,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      }\n    }, children);\n  } else {\n    return React.createElement(NativeSafeAreaView, {\n      style: styles.fill,\n      onInsetsChange: onInsetsChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      }\n    }, insets !== null ? React.createElement(SafeAreaContext.Provider, {\n      value: insets,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      }\n    }, children) : null);\n  }\n}\nvar styles = StyleSheet.create({\n  fill: {\n    flex: 1\n  }\n});\nexport var SafeAreaConsumer = SafeAreaContext.Consumer;\n\nfunction useParentSafeArea() {\n  return React.useContext(SafeAreaContext);\n}\n\nexport function useSafeArea() {\n  var safeArea = React.useContext(SafeAreaContext);\n\n  if (safeArea == null) {\n    throw new Error('No safe area value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');\n  }\n\n  return safeArea;\n}","map":{"version":3,"sources":["index.tsx"],"names":["SafeAreaContext","React","children","parentInsets","useParentSafeArea","insets","setInsets","onInsetsChange","event","styles","StyleSheet","fill","flex","SafeAreaConsumer","safeArea"],"mappings":";;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,SAAA,UAAA;AACA,OAAA,kBAAA;AAEA,OAAO,IAAMA,eAAe,GAAGC,KAAK,CAALA,aAAAA,CAAxB,IAAwBA,CAAxB;AAMP,OAAO,SAAA,gBAAA,CAAA,IAAA,EAA2D;AAA/BC,MAAAA,QAA+B,GAAA,IAAA,CAA/BA,QAAAA;AACjC,MAAIC,YAAY,GAAGC,iBAAnB,EAAA;;AADgE,MAAA,eAAA,GAEpCH,KAAK,CAALA,QAAAA,CAFoC,IAEpCA,CAFoC;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAEzDI,MAFyD,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAEjDC,SAFiD,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAGhE,MAAMC,cAAc,GAAGN,KAAK,CAALA,WAAAA,CAAkB,UAAA,KAAA,EAA8B;AACrEK,IAAAA,SAAS,CAACE,KAAK,CAALA,WAAAA,CAAVF,MAAS,CAATA;AADqBL,GAAAA,EAAvB,EAAuBA,CAAvB;;AAMA,MAAA,YAAA,EAAkB;AAChB,WAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAEQ,MAAM,CAAnB,IAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA;AAAA;AAAA,KAAA,EAAP,QAAO,CAAP;AADF,GAAA,MAEO;AACL,WACE,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA;AAAoB,MAAA,KAAK,EAAEA,MAAM,CAAjC,IAAA;AAAwC,MAAA,cAAc,EAAtD,cAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA;AAAA;AAAA,KAAA,EACGJ,MAAM,KAANA,IAAAA,GACC,KAAA,CAAA,aAAA,CAAC,eAAD,CAAA,QAAA,EAAA;AAA0B,MAAA,KAAK,EAA/B,MAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA;AAAA;AAAA,KAAA,EADDA,QACC,CADDA,GAFL,IACE,CADF;AAUH;AAED;AAAA,IAAMI,MAAM,GAAGC,UAAU,CAAVA,MAAAA,CAAkB;AAC/BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EADd;AACQ;AADyB,CAAlBF,CAAf;AAIA,OAAO,IAAMG,gBAAgB,GAAGb,eAAe,CAAxC,QAAA;;AAEP,SAAA,iBAAA,GAAwE;AACtE,SAAOC,KAAK,CAALA,UAAAA,CAAP,eAAOA,CAAP;AAGF;;AAAA,OAAO,SAAA,WAAA,GAAmC;AACxC,MAAMa,QAAQ,GAAGb,KAAK,CAALA,UAAAA,CAAjB,eAAiBA,CAAjB;;AACA,MAAIa,QAAQ,IAAZ,IAAA,EAAsB;AACpB,UAAM,IAAA,KAAA,CAAN,wGAAM,CAAN;AAIF;;AAAA,SAAA,QAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { EdgeInsets, InsetChangedEvent } from './SafeArea.types';\nimport NativeSafeAreaView from './NativeSafeAreaView';\n\nexport const SafeAreaContext = React.createContext<EdgeInsets | null>(null);\n\nexport interface SafeAreaViewProps {\n  children?: React.ReactNode;\n}\n\nexport function SafeAreaProvider({ children }: SafeAreaViewProps) {\n  let parentInsets = useParentSafeArea();\n  const [insets, setInsets] = React.useState<EdgeInsets | null>(null);\n  const onInsetsChange = React.useCallback((event: InsetChangedEvent) => {\n    setInsets(event.nativeEvent.insets);\n  }, []);\n\n  // If a provider is nested inside of another provider then we can just use\n  // the parent insets, without rendering another native safe area view\n  if (parentInsets) {\n    return <View style={styles.fill}>{children}</View>;\n  } else {\n    return (\n      <NativeSafeAreaView style={styles.fill} onInsetsChange={onInsetsChange}>\n        {insets !== null ? (\n          <SafeAreaContext.Provider value={insets}>\n            {children}\n          </SafeAreaContext.Provider>\n        ) : null}\n      </NativeSafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  fill: { flex: 1 },\n});\n\nexport const SafeAreaConsumer = SafeAreaContext.Consumer;\n\nfunction useParentSafeArea(): React.ContextType<typeof SafeAreaContext> {\n  return React.useContext(SafeAreaContext);\n}\n\nexport function useSafeArea(): EdgeInsets {\n  const safeArea = React.useContext(SafeAreaContext);\n  if (safeArea == null) {\n    throw new Error(\n      'No safe area value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.',\n    );\n  }\n  return safeArea;\n}\n\nexport type EdgeInsets = EdgeInsets;\n"]},"metadata":{},"sourceType":"module"}