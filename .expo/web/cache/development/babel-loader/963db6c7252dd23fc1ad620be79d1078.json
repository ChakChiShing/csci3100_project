{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TabBar from \"./TabBar\";\nimport SceneView from \"./SceneView\";\nimport Pager from \"./Pager\";\n\nvar TabView = function (_React$Component) {\n  _inherits(TabView, _React$Component);\n\n  var _super = _createSuper(TabView);\n\n  function TabView() {\n    var _this;\n\n    _classCallCheck(this, TabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      layout: _objectSpread({\n        width: 0,\n        height: 0\n      }, _this.props.initialLayout)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"jumpToIndex\", function (index) {\n      if (index !== _this.props.navigationState.index) {\n        _this.props.onIndexChange(index);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (_this.state.layout.width === width && _this.state.layout.height === height) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          onSwipeStart = _this$props.onSwipeStart,\n          onSwipeEnd = _this$props.onSwipeEnd,\n          navigationState = _this$props.navigationState,\n          lazy = _this$props.lazy,\n          lazyPreloadDistance = _this$props.lazyPreloadDistance,\n          keyboardDismissMode = _this$props.keyboardDismissMode,\n          swipeEnabled = _this$props.swipeEnabled,\n          tabBarPosition = _this$props.tabBarPosition,\n          renderTabBar = _this$props.renderTabBar,\n          renderScene = _this$props.renderScene,\n          renderLazyPlaceholder = _this$props.renderLazyPlaceholder,\n          sceneContainerStyle = _this$props.sceneContainerStyle,\n          style = _this$props.style;\n      var layout = this.state.layout;\n      return React.createElement(View, {\n        onLayout: this.handleLayout,\n        style: [styles.pager, style]\n      }, React.createElement(Pager, {\n        layout: layout,\n        navigationState: navigationState,\n        keyboardDismissMode: keyboardDismissMode,\n        swipeEnabled: swipeEnabled,\n        onSwipeStart: onSwipeStart,\n        onSwipeEnd: onSwipeEnd,\n        onIndexChange: this.jumpToIndex\n      }, function (_ref) {\n        var position = _ref.position,\n            render = _ref.render,\n            addEnterListener = _ref.addEnterListener,\n            jumpTo = _ref.jumpTo;\n        var sceneRendererProps = {\n          position: position,\n          layout: layout,\n          jumpTo: jumpTo\n        };\n        return React.createElement(React.Fragment, null, tabBarPosition === 'top' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n          navigationState: navigationState\n        })), render(navigationState.routes.map(function (route, i) {\n          return React.createElement(SceneView, _extends({}, sceneRendererProps, {\n            addEnterListener: addEnterListener,\n            key: route.key,\n            index: i,\n            lazy: typeof lazy === 'function' ? lazy({\n              route: route\n            }) : lazy,\n            lazyPreloadDistance: lazyPreloadDistance,\n            navigationState: navigationState,\n            style: sceneContainerStyle\n          }), function (_ref2) {\n            var loading = _ref2.loading;\n            return loading ? renderLazyPlaceholder({\n              route: route\n            }) : renderScene(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n              route: route\n            }));\n          });\n        })), tabBarPosition === 'bottom' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n          navigationState: navigationState\n        })));\n      }));\n    }\n  }]);\n\n  return TabView;\n}(React.Component);\n\nexport { TabView as default };\n\n_defineProperty(TabView, \"defaultProps\", {\n  tabBarPosition: 'top',\n  renderTabBar: function renderTabBar(props) {\n    return React.createElement(TabBar, props);\n  },\n  renderLazyPlaceholder: function renderLazyPlaceholder() {\n    return null;\n  },\n  keyboardDismissMode: 'auto',\n  swipeEnabled: true,\n  lazy: false,\n  lazyPreloadDistance: 0,\n  removeClippedSubviews: false\n});\n\nvar styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["TabView.tsx"],"names":["TabView","React","tabBarPosition","renderTabBar","props","renderLazyPlaceholder","keyboardDismissMode","swipeEnabled","lazy","lazyPreloadDistance","removeClippedSubviews","layout","width","height","initialLayout","index","e","render","style","styles","jumpToIndex","jumpTo","sceneRendererProps","position","navigationState","route","sceneContainerStyle","loading","renderScene","pager","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport SceneView from './SceneView';\nimport Pager from './Pager';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerProps,\n} from './types';\n\nexport type Props<T extends Route> = PagerProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: ((props: { route: T }) => boolean) | boolean;\n  lazyPreloadDistance: number;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'auto',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      keyboardDismissMode,\n      swipeEnabled,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <View onLayout={this.handleLayout} style={[styles.pager, style]}>\n        <Pager\n          layout={layout}\n          navigationState={navigationState}\n          keyboardDismissMode={keyboardDismissMode}\n          swipeEnabled={swipeEnabled}\n          onSwipeStart={onSwipeStart}\n          onSwipeEnd={onSwipeEnd}\n          onIndexChange={this.jumpToIndex}\n        >\n          {({ position, render, addEnterListener, jumpTo }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addEnterListener={addEnterListener}\n                        key={route.key}\n                        index={i}\n                        lazy={\n                          typeof lazy === 'function' ? lazy({ route }) : lazy\n                        }\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          }}\n        </Pager>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}