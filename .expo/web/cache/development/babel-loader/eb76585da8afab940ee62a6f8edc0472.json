{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { createAnimatedSet as set } from \"../core/AnimatedSet\";\nimport _interpolate from \"../derived/interpolate\";\nimport InternalAnimatedValue from \"./InternalAnimatedValue\";\nimport { evaluateOnce } from \"../derived/evaluateOnce\";\n\nvar AnimatedValue = function (_InternalAnimatedValu) {\n  _inherits(AnimatedValue, _InternalAnimatedValu);\n\n  var _super = _createSuper(AnimatedValue);\n\n  function AnimatedValue() {\n    _classCallCheck(this, AnimatedValue);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AnimatedValue, [{\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.__detachAnimation(this._animation);\n\n      evaluateOnce(set(this, value), this);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return _interpolate(this, config);\n    }\n  }]);\n\n  return AnimatedValue;\n}(InternalAnimatedValue);\n\nexport { AnimatedValue as default };","map":{"version":3,"sources":["/Users/apple/Desktop/M.Hero/project/csci3100_project/node_modules/react-native-reanimated/src/core/AnimatedValue.js"],"names":["createAnimatedSet","set","interpolate","InternalAnimatedValue","evaluateOnce","AnimatedValue","value","__detachAnimation","_animation","config"],"mappings":";;;;;;;;;;AAAA,SAASA,iBAAiB,IAAIC,GAA9B;AACA,OAAOC,YAAP;AACA,OAAOC,qBAAP;AACA,SAASC,YAAT;;IAGqBC,a;;;;;;;;;;;;;WACnB,kBAASC,KAAT,EAAgB;AACd,WAAKC,iBAAL,CAAuB,KAAKC,UAA5B;;AACAJ,MAAAA,YAAY,CAACH,GAAG,CAAC,IAAD,EAAOK,KAAP,CAAJ,EAAmB,IAAnB,CAAZ;AACD;;;WAED,qBAAYG,MAAZ,EAAoB;AAClB,aAAOP,YAAW,CAAC,IAAD,EAAOO,MAAP,CAAlB;AACD;;;;EARwCN,qB;;SAAtBE,a","sourcesContent":["import { createAnimatedSet as set } from '../core/AnimatedSet';\nimport interpolate from '../derived/interpolate';\nimport InternalAnimatedValue from './InternalAnimatedValue';\nimport { evaluateOnce } from '../derived/evaluateOnce';\n\n// Animated value wrapped with extra methods for omit cycle of dependencies\nexport default class AnimatedValue extends InternalAnimatedValue {\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    evaluateOnce(set(this, value), this);\n  }\n\n  interpolate(config) {\n    return interpolate(this, config);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}