{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport { useNavigationBuilder, createNavigatorFactory, TabRouter } from '@react-navigation/native';\nimport MaterialTopTabView from \"../views/MaterialTopTabView\";\n\nfunction MaterialTopTabNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenOptions = _ref.screenOptions,\n      lazy = _ref.lazy,\n      tabBarOptions = _ref.tabBarOptions,\n      rest = _objectWithoutProperties(_ref, [\"initialRouteName\", \"backBehavior\", \"children\", \"screenOptions\", \"lazy\", \"tabBarOptions\"]);\n\n  var defaultScreenOptions = {};\n\n  if (tabBarOptions) {\n    _extends2(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style\n    });\n\n    warnOnce(tabBarOptions, \"Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\".concat(JSON.stringify(defaultScreenOptions, null, 2), \"\\n\\nSee https://reactnavigation.org/docs/6.x/material-top-tab-navigator#options for more details.\"));\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Material Top Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\");\n  }\n\n  var _useNavigationBuilder = useNavigationBuilder(TabRouter, {\n    initialRouteName: initialRouteName,\n    backBehavior: backBehavior,\n    children: children,\n    screenOptions: screenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  return React.createElement(MaterialTopTabView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  }));\n}\n\nexport default createNavigatorFactory(MaterialTopTabNavigator);","map":{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["rest","defaultScreenOptions","Object","tabBarActiveTintColor","tabBarOptions","tabBarInactiveTintColor","tabBarPressColor","tabBarPressOpacity","tabBarShowLabel","tabBarShowIcon","tabBarAllowFontScaling","tabBarBounces","tabBarScrollEnabled","tabBarIconStyle","tabBarLabelStyle","tabBarItemStyle","tabBarIndicatorStyle","tabBarIndicatorContainerStyle","tabBarContentContainerStyle","tabBarStyle","style","warnOnce","JSON","navigation","useNavigationBuilder","initialRouteName","backBehavior","children","screenOptions","descriptors","createNavigatorFactory"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,QAAA,MAAA,WAAA;AACA,SAAA,oBAAA,EAAA,sBAAA,EAAA,SAAA,QAAA,0BAAA;AAUA,OAAA,kBAAA;;AAWA,SAAA,uBAAA,OAUU;AAAA,MAVuB,gBAUvB,QAVuB,gBAUvB;AAAA,MAVuB,YAUvB,QAVuB,YAUvB;AAAA,MAVuB,QAUvB,QAVuB,QAUvB;AAAA,MAVuB,aAUvB,QAVuB,aAUvB;AAAA,MAVuB,IAUvB,QAVuB,IAUvB;AAAA,MAVuB,aAUvB,QAVuB,aAUvB;AAAA,MADLA,IACK;;AACR,MAAIC,oBAAqD,GAAzD,EAAA;;AAEA,MAAA,aAAA,EAAmB;AACjBC,cAAAA,oBAAAA,EAAoC;AAClCC,MAAAA,qBAAqB,EAAEC,aAAa,CADF,eAAA;AAElCC,MAAAA,uBAAuB,EAAED,aAAa,CAFJ,iBAAA;AAGlCE,MAAAA,gBAAgB,EAAEF,aAAa,CAHG,UAAA;AAIlCG,MAAAA,kBAAkB,EAAEH,aAAa,CAJC,YAAA;AAKlCI,MAAAA,eAAe,EAAEJ,aAAa,CALI,SAAA;AAMlCK,MAAAA,cAAc,EAAEL,aAAa,CANK,QAAA;AAOlCM,MAAAA,sBAAsB,EAAEN,aAAa,CAPH,gBAAA;AAQlCO,MAAAA,aAAa,EAAEP,aAAa,CARM,OAAA;AASlCQ,MAAAA,mBAAmB,EAAER,aAAa,CATA,aAAA;AAUlCS,MAAAA,eAAe,EAAET,aAAa,CAVI,SAAA;AAWlCU,MAAAA,gBAAgB,EAAEV,aAAa,CAXG,UAAA;AAYlCW,MAAAA,eAAe,EAAEX,aAAa,CAZI,QAAA;AAalCY,MAAAA,oBAAoB,EAAEZ,aAAa,CAbD,cAAA;AAclCa,MAAAA,6BAA6B,EAAEb,aAAa,CAdV,uBAAA;AAelCc,MAAAA,2BAA2B,EAAEd,aAAa,CAfR,qBAAA;AAgBlCe,MAAAA,WAAW,EAAEf,aAAa,CAACgB;AAhBO,KAApClB;;AAmBAmB,IAAAA,QAAQ,CAAA,aAAA,EAAA,kMAAA,MAAA,CAE4LC,IAAI,CAAJA,SAAAA,CAAAA,oBAAAA,EAAAA,IAAAA,EAF5L,CAE4LA,CAF5L,EAARD,mGAAQ,CAAA,CAARA;AAQD;;AAED,MAAI,OAAA,IAAA,KAAJ,SAAA,EAA+B;AAC7BpB,IAAAA,oBAAoB,CAApBA,IAAAA,GAAAA,IAAAA;AAEAoB,IAAAA,QAAQ,CAAA,IAAA,EAARA,gGAAQ,CAARA;AAID;;AAxCO,8BA0CmCG,oBAAoB,CAAA,SAAA,EAMlD;AACXC,IAAAA,gBADW,EACXA,gBADW;AAEXC,IAAAA,YAFW,EAEXA,YAFW;AAGXC,IAAAA,QAHW,EAGXA,QAHW;AAIXC,IAAAA,aAAAA,EAAAA;AAJW,GANkD,CA1CvD;AAAA,MA0CF,KA1CE,yBA0CF,KA1CE;AAAA,MA0CF,WA1CE,yBA0CF,WA1CE;AAAA,MA0CoBL,UA1CpB,yBA0CoBA,UA1CpB;;AAuDR,SACE,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,UAAU,EAHZ,UAAA;AAIE,IAAA,WAAW,EAAEM;AAJf,GAAA,CAAA,CADF;AAQD;;AAED,eAAeC,sBAAsB,CAArC,uBAAqC,CAArC","sourcesContent":["import * as React from 'react';\nimport warnOnce from 'warn-once';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  TabRouter,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n  ParamListBase,\n} from '@react-navigation/native';\nimport MaterialTopTabView from '../views/MaterialTopTabView';\nimport type {\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<MaterialTopTabNavigationOptions> &\n  TabRouterOptions &\n  MaterialTopTabNavigationConfig;\n\nfunction MaterialTopTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenOptions,\n  // @ts-expect-error: lazy is deprecated\n  lazy,\n  // @ts-expect-error: tabBarOptions is deprecated\n  tabBarOptions,\n  ...rest\n}: Props) {\n  let defaultScreenOptions: MaterialTopTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style,\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/6.x/material-top-tab-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Material Top Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.`\n    );\n  }\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    TabNavigationState<ParamListBase>,\n    TabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    MaterialTopTabNavigationOptions,\n    MaterialTopTabNavigationEventMap\n  >(TabRouter, {\n    initialRouteName,\n    backBehavior,\n    children,\n    screenOptions,\n  });\n\n  return (\n    <MaterialTopTabView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap,\n  typeof MaterialTopTabNavigator\n>(MaterialTopTabNavigator);\n"]},"metadata":{},"sourceType":"module"}