{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport { adapt } from \"../core/AnimatedBlock\";\n\nvar AnimatedConcat = function (_AnimatedNode) {\n  _inherits(AnimatedConcat, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedConcat);\n\n  function AnimatedConcat(input) {\n    _classCallCheck(this, AnimatedConcat);\n\n    return _super.call(this, {\n      type: 'concat',\n      input: input.map(function (n) {\n        return n.__nodeID;\n      })\n    }, input);\n  }\n\n  return AnimatedConcat;\n}(AnimatedNode);\n\nexport function createAnimatedConcat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return new AnimatedConcat(args.map(adapt));\n}","map":{"version":3,"sources":["/Users/apple/Desktop/M.Hero/project/csci3100_project/node_modules/react-native-reanimated/src/core/AnimatedConcat.js"],"names":["AnimatedNode","adapt","AnimatedConcat","input","type","map","n","__nodeID","createAnimatedConcat","args"],"mappings":";;;;;;;;;AAAA,OAAOA,YAAP;AACA,SAASC,KAAT;;IAEMC,c;;;;;AACJ,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,6BACX;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBD,MAAAA,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,QAAN;AAAA,OAAX;AAAzB,KADW,EAC4CJ,KAD5C;AAElB;;;EAH0BH,Y;;AAM7B,OAAO,SAASQ,oBAAT,GAAuC;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC5C,SAAO,IAAIP,cAAJ,CAAmBO,IAAI,CAACJ,GAAL,CAASJ,KAAT,CAAnB,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    super({ type: 'concat', input: input.map(n => n.__nodeID) }, input);\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}